# Set execution policy
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser

# Define log directories using dynamic user path
$baseDirectory = Join-Path -Path $env:APPDATA -ChildPath "KOII-Desktop-Node"
$uptimeDirectory = Join-Path -Path $baseDirectory -ChildPath "uptime"
$taskLogDirectory = Join-Path -Path $baseDirectory -ChildPath "task log"

# Ensure directories exist
foreach ($dir in @($uptimeDirectory, $taskLogDirectory)) {
    if (-not (Test-Path -Path $dir)) {
        New-Item -Path $dir -ItemType Directory -Force
    }
}

# Define files for tracking uptime
$uptimeFile = Join-Path -Path $uptimeDirectory -ChildPath "uptime_data.json"
$monthlyUptimeFile = Join-Path -Path $uptimeDirectory -ChildPath "monthly_uptime.json"

# Function to get current month key (for tracking uptime per month)
function Get-MonthKey {
    return (Get-Date -Format "yyyy-MM")  # Example: "2025-03"
}

# Load previous uptime data
$uptimeData = @{}
if (Test-Path $uptimeFile) {
    $uptimeData = (Get-Content $uptimeFile | ConvertFrom-Json)
    if ($uptimeData -is [PSCustomObject]) {
        $uptimeData = @{}
    }
}

# Load monthly uptime data
$monthlyUptimeData = @{}
if (Test-Path $monthlyUptimeFile) {
    $monthlyUptimeData = (Get-Content $monthlyUptimeFile | ConvertFrom-Json)
    if ($monthlyUptimeData -is [PSCustomObject]) {
        $monthlyUptimeData = @{}
    }
}

# Function to manage log file size
function Manage-LogFiles {
    $logFilePath = Join-Path -Path $uptimeDirectory -ChildPath "uptime_log.txt"
    $maxLogs = 2000

    if (-not (Test-Path $logFilePath)) {
        New-Item -Path $logFilePath -ItemType File -Force
    }

    $logEntries = Get-Content -Path $logFilePath
    if ($logEntries.Count -gt $maxLogs) {
        $logEntries[-$maxLogs..-1] | Set-Content -Path $logFilePath
    }
}

# Function to monitor Koii Node process
function Monitor-KoiiNode {
    while ($true) {
        $processes = Get-Process | Where-Object { $_.ProcessName -like "*Koii*" }

        if ($processes) {
            foreach ($process in $processes) {
                try {
                    # Get process metrics
                    $processId = $process.Id
                    $processName = $process.ProcessName
                    $startTime = $process.StartTime
                    $currentTime = Get-Date
                    $monthKey = Get-MonthKey

                    # Load previous uptime
                    $previousUptime = if ($uptimeData.ContainsKey("LastUptime")) { [double]$uptimeData["LastUptime"] } else { 0 }

                    # Check if process restarted
                    if ($uptimeData.ContainsKey("LastStartTime") -and [datetime]$uptimeData["LastStartTime"] -ne $startTime) {
                        $totalUptime = [math]::Round(($currentTime - $startTime).TotalHours + $previousUptime, 2)
                    } else {
                        $totalUptime = [math]::Round(($currentTime - $startTime).TotalHours, 2)
                    }

                    # Update uptime data
                    $uptimeData["LastUptime"] = $totalUptime
                    $uptimeData["LastStartTime"] = $startTime
                    $uptimeData | ConvertTo-Json | Set-Content $uptimeFile

                    # Update monthly uptime tracking
                    if ($monthlyUptimeData.ContainsKey($monthKey)) {
                        $monthlyUptimeData[$monthKey] = [math]::Round($monthlyUptimeData[$monthKey] + ($currentTime - $startTime).TotalHours, 2)
                    } else {
                        $monthlyUptimeData[$monthKey] = $totalUptime
                    }

                    $monthlyUptimeData | ConvertTo-Json | Set-Content $monthlyUptimeFile

                    # Get CPU Load
                    try {
                        $cpuCounter = (Get-Counter "\Process($($process.ProcessName))\% Processor Time").CounterSamples.CookedValue
                        $cpuLoad = [math]::Round($cpuCounter / (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors, 2)
                    } catch {
                        $cpuLoad = "N/A"
                    }

                    # Get Memory Usage
                    $memoryUsage = [math]::Round($process.WorkingSet / 1MB, 2)

                    # Set color for Uptime
                    $uptimeColor = if ($totalUptime -gt 50) { "Green" } elseif ($totalUptime -ge 25) { "Yellow" } else { "Red" }

                    # Set color for CPU Load
                    $cpuColor = if ($cpuLoad -is [double]) {
                        if ($cpuLoad -le 25) { "DarkYellow" } elseif ($cpuLoad -le 50) { "Yellow" } else { "Red" }
                    } else { "White" }

                    # Set color for Memory Usage
                    $memoryColor = "Magenta"

                    # Display process details
                    Write-Host "Task: $processName (PID: $processId)" -ForegroundColor Blue
                    Write-Host "Total Uptime: $totalUptime hours" -ForegroundColor $uptimeColor
                    Write-Host "CPU Load: $cpuLoad %" -ForegroundColor $cpuColor
                    Write-Host "Memory Usage: $memoryUsage MB" -ForegroundColor $memoryColor
                    Write-Host "Monthly Uptime for ${monthKey}: $($monthlyUptimeData[$monthKey]) hours" -ForegroundColor Cyan
                    Write-Host "------------------------------------"

                    # Log uptime
                    $logFilePath = Join-Path -Path $uptimeDirectory -ChildPath "uptime_log.txt"
                    $logMessage = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Task: $processName - PID: $processId - Uptime: $totalUptime hours - CPU: $cpuLoad% - Mem: $memoryUsage MB"
                    Add-Content -Path $logFilePath -Value $logMessage

                    # Manage log files
                    Manage-LogFiles
                } catch {
                    Write-Host "Error processing $($process.ProcessName) (PID: $($process.Id)): $_" -ForegroundColor Red
                }
            }
        } else {
            Write-Host "Koii Node process is not running." -ForegroundColor Red
        }

        Start-Sleep -Seconds 3600  # Wait 1 hour before checking again
    }
}

# Start monitoring after defining the function
Monitor-KoiiNode
